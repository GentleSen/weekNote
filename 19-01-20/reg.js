/**
 * 正则
 */

// 使用正则表达式声明正则,第一个参数代表正则内容，第二个参数代表修饰符
var reg = new RegExp('[a-zA-Z]{5,10}', 'g');
// 使用字面量的方式声明正则,两个 / 表示正则内容,最后一个 , 之后表示修饰符, 以^开始,$结束
var reg_1 = /^[a-zA-Z]{5, 10}$/g;

/**
 * 正则修饰符：
 * 1. g: 表示全局匹配，即匹配到第一个之后不停止继续匹配
 * 2. i：表示忽略大小写进行匹配
 * 3. m：表示多行匹配,遇到换行符继续匹配,直到字符串结尾
 */

/**
 * 正则体：
 * 1. * 匹配前面的子表达式0-n次
 * 2. + 匹配前面的子表达式1-n次
 * 3. ? 匹配前面的子表达式0-1次
 * 4. {x, y} 匹配前面的子表达式x-y次
 * 5. x|y 匹配x或者y
 * 6.     
 */
